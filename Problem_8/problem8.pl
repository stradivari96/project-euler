euler8 :-
    Input is 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450,
    number_digits(Input, Is),
    findall(X, (sublist(Is, 13, X)), Rs),
    maplist(product, Rs, Ns),
    max_list(Ns, Result),
    writeln(Result).
  
product([], 1).
product([X|Xs], N) :-
    product(Xs, N1),
    N is N1 * X.

number_digits(N, Ds) :-
number_codes(N, Cs),
    maplist(code_digit, Cs, Ds).

code_digit(C, D) :-
    D is C - 48.

suffix(Xs, Xs).
suffix(Xs, [_|Ys]) :- suffix(Xs, Ys).

sublist(Xs, Ys) :- suffix(T, Xs), prefix(T, Ys).

first_n(_, 0, []).
first_n([X|Ls], N, [X|Rs]) :- N1 is N-1, first_n(Ls, N1, Rs). 

last_n(Ls, N, Rs) :- length(Rs, N), suffix(Rs, Ls).

sublist(Xs, N, Rs) :-
    prefix(T, Xs),
    suffix(Rs, T),
    length(Rs, N).

sublist(Xs, N, L, Rs) :-
    NL is N+L,
    first_n(Xs, NL, Ts),
    last_n(Ts, L, Rs).